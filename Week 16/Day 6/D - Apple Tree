#include <bits/stdc++.h>
using namespace std;
 
vector<vector<int>> adj;
vector<int> val;
 
int dfs(int at, int from)
{
    int count = 0;
    for (auto child : adj[at])
    {
        if (child != from)
        {
            count += dfs(child, at);
        }
    }
    if (count == 0 && adj[at].size() == 1)
    {
        count++;
    }
    val[at] = count;
    return count;
}
 
int solve()
{
    int n;
    cin >> n;
    adj.resize(n + 1);
    val.resize(n + 1, 0);
    for (int i = 0; i < n - 1; i++)
    {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    dfs(1, 1);
    int q;
    cin >> q;
    for (int i = 1; i <= q; i++)
    {
        int u, v;
        cin >> u >> v;
        long long ans = ((long long)val[u] * (long long)val[v]);
        cout << ans << endl;
    }
    adj.clear();
    val.clear();
    return 0;
}
 
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
 
    int t;
    cin >> t;
    while (t--)
    {
        solve();
    }
 
    return 0;
}
