class Solution {
public:
    void backtrack(vector<int>& candidates, int target, vector<int>& path, vector<vector<int>>& res, int index) {
        if(target == 0) {
            res.push_back(path);
            return;
        }
        for(int i = index; i < candidates.size(); i++) {
            if(i > index && candidates[i] == candidates[i - 1]) continue;
            if(target < candidates[i]) break;
            path.push_back(candidates[i]);
            backtrack(candidates, target - candidates[i], path, res, i + 1);
            path.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> res;
        vector<int> path;
        backtrack(candidates, target, path, res, 0);
        return res;
    }
};
