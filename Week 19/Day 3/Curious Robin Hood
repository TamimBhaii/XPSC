#include <bits/stdc++.h>
using namespace std;
int tree[400020], arr[100005];
void build(int n, int s, int e)
{
    if (s == e)
    {
        tree[n] = arr[s];
        return;
    }
    int l = n * 2, r = l + 1, m = (s + e) / 2;
    build(l, s, m);
    build(r, m + 1, e);
    tree[n] = tree[l] + tree[r];
}
int query(int n, int s, int e, int qs, int qe)
{
    if (qs > e || qe < s)
    {
        return 0;
    }
    if (qs <= s && qe >= e)
    {
        return tree[n];
    }
    int l = n * 2, r = l + 1, m = (s + e) / 2;
    return query(l, s, m, qs, qe) + query(r, m + 1, e, qs, qe);
}
void update(int n, int s, int e, int i, int v)
{
    if (i < s || i > e)
    {
        return;
    }
    if (s == e)
    {
        tree[n] += v;
        return;
    }
    int l = n * 2, r = l + 1, m = (s + e) / 2;
    update(l, s, m, i, v);
    update(r, m + 1, e, i, v);
    tree[n] = tree[l] + tree[r];
}
void update_set(int n, int s, int e, int i, int v)
{
    if (i < s || i > e)
    {
        return;
    }
    if (s == e)
    {
        tree[n] = v;
        return;
    }
    int l = n * 2, r = l + 1, m = (s + e) / 2;
    update_set(l, s, m, i, v);
    update_set(r, m + 1, e, i, v);
    tree[n] = tree[l] + tree[r];
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int q, t = 1, n, m, i, x, y, d;
    cin >> q;
    while (q--)
    {
        cin >> n >> m;
        for (i = 1; i <= n; i++)
        {
            cin >> arr[i];
        }
        build(1, 1, n);
        cout << "Case " << t++ << ":" << endl;
        while (m--)
        {
            cin >> d;
            if (d == 1)
            {
                cin >> x;
                x++;
                cout << query(1, 1, n, x, x) << endl;
                update_set(1, 1, n, x, 0);
            }
            else if (d == 2)
            {
                cin >> x >> y;
                x++;
                update(1, 1, n, x, y);
            }
            else
            {
                cin >> x >> y;
                x++, y++;
                cout << query(1, 1, n, x, y) << endl;
            }
        }
    }

    return 0;
}
